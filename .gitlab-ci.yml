# This file is a template, and might need editing before it works on your project.
# Official language image. Look for the different tagged releases at:
# https://hub.docker.com/r/library/rust/tags/
# image:
#   docker
# $CI_REGISTRY_IMAGE

# Optional: Pick zero or more services to be used on all builds.
# Only needed when using a docker container to run your tests in.
# Check out: http://docs.gitlab.com/ce/ci/docker/using_docker_images.html#what-is-a-service
# services:
#   - mysql:latest
#   - redis:latest
#   - postgres:latest

# Optional: Install a C compiler, cmake and git into the container.
# You will often need this when you (or any of your dependencies) depends on C code.
# before_script:
#   - apt-get update -yqq
#   - apt-get install -yqq --no-install-recommends build-essential

# Use cargo to test the project
# before_script:
#   - rustup update nightly && rustup default nightly
#   - rustup default nightly
#   - apt-get update -yqq
#   - apt-get install -yqq --no-install-recommends zip lcov

# before_script:
# - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

stages:
  - setup
  - test
  - build
  - deploy

prepare:
  stage: setup
  image: $CI_REGISTRY_IMAGE
  tags:
    - docker
  cache:
    key: "$CI_JOB_NAME-$CI_COMMIT_REF_SLUG"
    paths:
      - target/debug/deps
      - target/release/deps
  script:
    - rustup update
    # - cargo build +nightly

test:cargo:
  stage: test
  image: $CI_REGISTRY_IMAGE
  tags:
    - docker
  script:
    - rustc --version && cargo --version # Print version info for debugging
    - export CARGO_INCREMENTAL=0
    - export RUSTFLAGS="-Zprofile -Ccodegen-units=1 -Cinline-threshold=0 -Clink-dead-code -Coverflow-checks=off"
    - cargo test --verbose $CARGO_OPTIONS
    # make it a vaild json
    # - ./format_json.sh test_results.json
  cache:
    key: "$CI_JOB_NAME-$CI_COMMIT_REF_SLUG"
    paths:
      - target/debug/deps
      - target/release/deps
    policy: pull
    # artifacts:
    #   paths:
    #     - test_results.json
    # expire_in: 30 days

# benchmark:cargo:
#   stage: test
# image: $CI_REGISTRY_IMAGE
#   tags:
#     - docker
#   script:
#     - cargo bench +nightly -v -- -Z unstable-options --format=json > bench_results.json
#     # again vaild json..
#     - ./format_json.sh bench_results.json
#   cache:
#     key: "$CI_JOB_NAME-$CI_COMMIT_REF_SLUG"
#     paths:
#       - target/debug/deps
#       - target/release/deps
#     policy: pull
#   artifacts:
#     paths:
#       - bench_results.json
#     expire_in: 30 days

coverage:cargo:
  stage: test
  image: $CI_REGISTRY_IMAGE
  tags:
    - docker
  script:
    - curl -L https://github.com/mozilla/grcov/releases/latest/download/grcov-linux-x86_64.tar.bz2 | tar jxf -
    - export CARGO_INCREMENTAL=0
    - export RUSTFLAGS="-Zprofile -Ccodegen-units=1 -Cinline-threshold=0 -Clink-dead-code -Coverflow-checks=off"
    - cargo test --verbose $CARGO_OPTIONS
    - |
      zip -0 ccov.zip `find . \( -name "superrustendo*.gc*" \) -print`;
      ./grcov ccov.zip -s . -t lcov --llvm --branch --ignore-not-existing --ignore "/*" -o lcov.info;
    - genhtml lcov.info -o target/cov
  cache:
    key: "$CI_JOB_NAME-$CI_COMMIT_REF_SLUG"
    paths:
      - target/debug
      - target/release
    policy: pull
  artifacts:
    paths:
      - target/cov
  #   expire_in: 30 days

doc:cargo:
  stage: build
  image: $CI_REGISTRY_IMAGE
  tags:
    - docker
  script:
    - cargo
  cache:
    key: "$CI_JOB_NAME-$CI_COMMIT_REF_SLUG"
    paths:
      - target/doc

pages:
  tags:
    - docker
  stage: deploy
  image: $CI_REGISTRY_IMAGE
  dependencies:
    - coverage:cargo
    - doc:cargo
  script:
    # - find target/cov -xtype l -delete
    - mv target/cov public/cov
    - mv target/doc
    # - mv test_results.json public
    # - mv bench_results.json public
  artifacts:
    paths:
      - public
    expire_in: 30 days
  only:
    - master

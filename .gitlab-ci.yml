# This file is a template, and might need editing before it works on your project.
# Official language image. Look for the different tagged releases at:
# https://hub.docker.com/r/library/rust/tags/
image: "rust:latest"

# Optional: Pick zero or more services to be used on all builds.
# Only needed when using a docker container to run your tests in.
# Check out: http://docs.gitlab.com/ce/ci/docker/using_docker_images.html#what-is-a-service
# services:
#   - mysql:latest
#   - redis:latest
#   - postgres:latest

# Optional: Install a C compiler, cmake and git into the container.
# You will often need this when you (or any of your dependencies) depends on C code.
# before_script:
#   - apt-get update -yqq
#   - apt-get install -yqq --no-install-recommends build-essential

# Use cargo to test the project
before_script:
  # - rustup update nightly && rustup default nightly
  - rustup default nightly

stages:
  - setup
  - test
  - deploy

prepare:
  stage: setup
  tags:
    - docker
  cache:
    key: "$CI_JOB_NAME-$CI_COMMIT_REF_SLUG"
    paths:
      - target/debug/deps
      - target/release/deps
  script:
    - cargo build

test:cargo:
  stage: test
  tags:
    - docker
  script:
    - rustc --version && cargo --version # Print version info for debugging
    - cargo test -v --all -- -Z unstable-options --format=json > test_results.json
    # make it a vaild json
    - ./format_json.sh test_results.json
  cache:
    key: "$CI_JOB_NAME-$CI_COMMIT_REF_SLUG"
    paths:
      - target/debug/deps
      - target/release/deps
    policy: pull
  artifacts:
    paths:
      - test_results.json
    expire_in: 30 days

benchmark:cargo:
  stage: test
  tags:
    - docker
  script:
    - cargo bench -v -- -Z unstable-options --format=json > bench_results.json
    # again vaild json..
    - ./format_json.sh bench_results.json
  cache:
    key: "$CI_JOB_NAME-$CI_COMMIT_REF_SLUG"
    paths:
      - target/debug/deps
      - target/release/deps
    policy: pull
  artifacts:
    paths:
      - bench_results.json
    expire_in: 30 days

coverage:cargo:
  stage: test
  tags:
    - docker
  script:
    - "RUSTFLAGS='-C link-dead-code' cargo test --no-run"
    - kcov --exclude-pattern=/.cargo/,/usr/lib --verify target/cov `ls target/debug/decoder-* | head -n1`
    # - find target/cov -xtype l -delete
    - echo `./show_coverage.sh`
  cache:
    key: "$CI_JOB_NAME-$CI_COMMIT_REF_SLUG"
    paths:
      - target/debug
      - target/release
    policy: pull
  artifacts:
    paths:
      - target/cov
  #   expire_in: 30 days

pages:
  tags:
    - docker
  stage: deploy
  dependencies:
    - coverage:cargo
    - test:cargo
    - benchmark:cargo
  script:
    - find target/cov -xtype l -delete
    - mv target/cov public
    - mv test_results.json public
    - mv bench_results.json public
  artifacts:
    paths:
      - public
    expire_in: 30 days
  only:
    - master

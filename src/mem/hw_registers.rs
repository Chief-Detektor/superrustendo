use crate::cpu::address::Address;

use super::{wram::WRAM, Bus};

pub enum BusComponent {
    WRAM,
    PPU,
    APU,
    CPU,
    DMA,
    //   ROM is handled by the cartridge
}

type BitMask = String;
type IOAddress = u16;

pub enum Type {
    R16,
    R24,
    R8,
    R8x2,
    RW16,
    RW24,
    RW8,
    W16,
    W24,
    W8,
    W8x2,
}

#[repr(u16)]
#[derive(Debug, Clone, Copy)]
pub enum HWRegister {
    // PPU
    INIDISP = 0x2100,
    OBJSEL,
    OAMADDL,
    OAMADDH,
    OAMDATA,
    BGMODE,
    MOSAIC,
    BG1SC,
    BG2SC,
    BG3SC,
    BG4SC,
    BG12NBA,
    BG34NBA,
    BG1HOFS,
    M7HOFS,
    BG1VOFS,
    M7VOFS,
    BG3VOFS,
    BG4HOFS,
    BG4VOFS,
    VMAIN,
    VMADDL,
    VMADDH,
    VMDATAL,
    VMDATAH,
    M7SEL,
    M7A,
    M7B,
    M7C,
    M7D,
    M7X,
    M7Y,
    CGADD,
    CGDATA,
    W12SEL,
    W34SEL,
    WOBJSEL,
    WH0,
    WH1,
    WH2,
    WH3,
    WBGLOG,
    WOBJLOG,
    TM,
    TS,
    TMW,
    TSW,
    CGWSEL,
    CGADSUB,
    COLDATA,
    SETINI,
    MPYL,
    MPYM,
    MPYH,
    SLHV,
    OAMDATAREAD,
    VMDATALREAD,
    VMDATAHREAD,
    CGDATAREAD,
    OPHCT,
    OPVCT,
    STAT77,
    STAT78,
    // APU
    APUIO0,
    APUIO1,
    APUIO2,
    APUIO3,
    // S-WRAM
    WMDATA = 0x2180,
    WMADDL,
    WMADDM,
    WMADDH,
    // JOYPAD
    // JOYOUT os R and JOYSER0 is W
    JOYOUT_JOYSER0 = 0x4016,
    //    JOYSER0 = 0x4016,
    JOYSER1,
    NMITIMEN = 0x4200,
    WRIO,   // = 0x4201,
    WRMPYA, // = 0x4202,
    WRMPYB,
    WRDIVL,
    WRDIVH,
    WRDIVB,
    HTIMEL,
    HTIMEH,
    VTIMEL,
    VTIMEH,
    MDMAEN = 0x420b,
    HDMAEN,
    MEMSEL,
    RDNMI = 0x4210,
    TIMEUP,
    HVBJOY,
    RDIO,
    RDDIVL,
    RDIVH,
    RDMPYL,
    RDMPLYH,
    JOY1L,
    JOY1H,
    JOY2L,
    JOY2H,
    JOY3L,
    JOY3H,
    JOY4L,
    JOY4H,
    // DMA
    DMAP0 = 0x4300,
    BBAD0,
    A1T0L,
    A1T0H,
    A1B0,
    DAS0L,
    DAS0H,
    DASB0,
    A2A0L,
    A2A0H,
    NTLR0,
    //   UNUSED0 = 0x430b,
    DMAP1 = 0x4310,
    BBAD1,
    A1T1L,
    A1T1H,
    A1B1,
    DAS1L,
    DAS1H,
    DASB1,
    A2A1L,
    A2A1H,
    NTLR1,
    //    UNUSED1,
    DMAP2 = 0x4320,
    BBAD2,
    A1T2L,
    A1T2H,
    A1B2,
    DAS2L,
    DAS2H,
    DASB2,
    A2A2L,
    A2A2H,
    NTLR2,
    //    UNUSED1,
    DMAP3 = 0x4330,
    BBAD3,
    A1T3L,
    A1T3H,
    A1B3,
    DAS3L,
    DAS3H,
    DASB3,
    A2A3L,
    A2A3H,
    NTLR3,
    //    UNUSED1,
    DMAP4 = 0x4340,
    BBAD4,
    A1T4L,
    A1T4H,
    A1B4,
    DAS4L,
    DAS4H,
    DASB4,
    A2A4L,
    A2A4H,
    NTLR4,
    //    UNUSED1,
    DMAP5 = 0x4350,
    BBAD5,
    A1T5L,
    A1T5H,
    A1B5,
    DAS5L,
    DAS5H,
    DASB5,
    A2A5L,
    A2A5H,
    NTLR5,
    //    UNUSED1,
    DMAP6 = 0x4360,
    BBAD6,
    A1T6L,
    A1T6H,
    A1B6,
    DAS6L,
    DAS6H,
    DASB6,
    A2A6L,
    A2A6H,
    NTLR6,
    //    UNUSED1,
    DMAP7 = 0x4370,
    BBAD7,
    A1T7L,
    A1T7H,
    A1B7,
    DAS7L,
    DAS7H,
    DASB7,
    A2A7L,
    A2A7H,
    NTLR7,
    //    UNUSED1,
}

impl HWRegister {
    pub fn dispatch_write(bus: &Bus, address: Address, value: u8) {
        if WRAM::is_wram(address) {
            bus.wram.borrow_mut().write(address, value);
            return;
        }
        if HWRegister::is_hw_register(address) {
            match HWRegister::get_register(address.address) {
                Some(reg) => {
                    match reg.get_type() {
                        Type::W8
                        | Type::W8x2
                        | Type::W16
                        | Type::W24
                        | Type::RW8
                        | Type::RW16
                        | Type::RW24 => {
                            println!("Writing {:?}, value: {:x}", reg, value);
                        }
                        _ => {
                            panic!("Write to read only register {:?}, value: {:x}", reg, value);
                            //                            println!("Writing {:?}, value: {:x}", reg, value);
                        }
                    }
                }
                None => {
                    println!(
                        "Write to unknown register {:?}, value: {:x} => IGNORE",
                        address, value
                    );
                    //println!("Write to {:?}, value: {:x}", HWRegister::get_register(address.address), value);
                }
            }
        }
    }

    pub fn dispatch_read(bus: &Bus, address: Address) -> Option<u8> {
        if WRAM::is_wram(address) {
            if let Some(byte) = bus.wram.borrow().read(address) {
                bus.set_mdr(byte);
                return Some(byte);
            }
        }
        // TODO: Get Type and Component and Bitmask?
        if HWRegister::is_hw_register(address) {
            match HWRegister::get_register(address.address) {
                Some(reg) => {
                    match reg.get_type() {
                        // Handling of write only registers => return MDR
                        Type::W8 | Type::W8x2 | Type::W16 | Type::W24 => {
                            // TODO: Check if this is correct behaviour. In case of an write only
                            // Register we return the value of the MDR
                            return Some(bus.get_mdr());
                        }
                        _ => {
                            println!("Reading {:?}", reg);
                        }
                    }
                }
                _ => {
                    println!("Reading {:?}", HWRegister::get_register(address.address));
                }
            }
        } else {
        }
        None
    }

    pub fn get_address(&self) -> u16 {
        *self as u16
    }

    pub fn get_component(&self) -> BusComponent {
        match self {
            HWRegister::INIDISP => BusComponent::PPU,
            HWRegister::OBJSEL => BusComponent::PPU,
            HWRegister::OAMADDL => BusComponent::PPU,
            HWRegister::OAMADDH => BusComponent::PPU,
            HWRegister::OAMDATA => BusComponent::PPU,
            HWRegister::BGMODE => BusComponent::PPU,
            HWRegister::MOSAIC => BusComponent::PPU,
            HWRegister::BG1SC => BusComponent::PPU,
            HWRegister::BG2SC => BusComponent::PPU,
            HWRegister::BG3SC => BusComponent::PPU,
            HWRegister::BG4SC => BusComponent::PPU,
            HWRegister::BG12NBA => BusComponent::PPU,
            HWRegister::BG34NBA => BusComponent::PPU,
            HWRegister::BG1HOFS => BusComponent::PPU,
            HWRegister::M7HOFS => BusComponent::PPU,
            HWRegister::BG1VOFS => BusComponent::PPU,
            HWRegister::M7VOFS => BusComponent::PPU,
            HWRegister::BG3VOFS => BusComponent::PPU,
            HWRegister::BG4HOFS => BusComponent::PPU,
            HWRegister::BG4VOFS => BusComponent::PPU,
            HWRegister::VMAIN => BusComponent::PPU,
            HWRegister::VMADDL => BusComponent::PPU,
            HWRegister::VMADDH => BusComponent::PPU,
            HWRegister::VMDATAL => BusComponent::PPU,
            HWRegister::VMDATAH => BusComponent::PPU,
            HWRegister::M7SEL => BusComponent::PPU,
            HWRegister::M7A => BusComponent::PPU,
            HWRegister::M7B => BusComponent::PPU,
            HWRegister::M7C => BusComponent::PPU,
            HWRegister::M7D => BusComponent::PPU,
            HWRegister::M7X => BusComponent::PPU,
            HWRegister::M7Y => BusComponent::PPU,
            HWRegister::CGADD => BusComponent::PPU,
            HWRegister::CGDATA => BusComponent::PPU,
            HWRegister::W12SEL => BusComponent::PPU,
            HWRegister::W34SEL => BusComponent::PPU,
            HWRegister::WOBJSEL => BusComponent::PPU,
            HWRegister::WH0 => BusComponent::PPU,
            HWRegister::WH1 => BusComponent::PPU,
            HWRegister::WH2 => BusComponent::PPU,
            HWRegister::WH3 => BusComponent::PPU,
            HWRegister::WBGLOG => BusComponent::PPU,
            HWRegister::WOBJLOG => BusComponent::PPU,
            HWRegister::TM => BusComponent::PPU,
            HWRegister::TS => BusComponent::PPU,
            HWRegister::TMW => BusComponent::PPU,
            HWRegister::TSW => BusComponent::PPU,
            HWRegister::CGWSEL => BusComponent::PPU,
            HWRegister::CGADSUB => BusComponent::PPU,
            HWRegister::COLDATA => BusComponent::PPU,
            HWRegister::SETINI => BusComponent::PPU,
            HWRegister::MPYL => BusComponent::PPU,
            HWRegister::MPYM => BusComponent::PPU,
            HWRegister::MPYH => BusComponent::PPU,
            HWRegister::SLHV => BusComponent::PPU,
            HWRegister::OAMDATAREAD => BusComponent::PPU,
            HWRegister::VMDATALREAD => BusComponent::PPU,
            HWRegister::VMDATAHREAD => BusComponent::PPU,
            HWRegister::CGDATAREAD => BusComponent::PPU,
            HWRegister::OPHCT => BusComponent::PPU,
            HWRegister::OPVCT => BusComponent::PPU,
            HWRegister::STAT77 => BusComponent::PPU,
            HWRegister::STAT78 => BusComponent::PPU,
            // APU
            HWRegister::APUIO0 => BusComponent::APU,
            HWRegister::APUIO1 => BusComponent::APU,
            HWRegister::APUIO2 => BusComponent::APU,
            HWRegister::APUIO3 => BusComponent::APU,

            HWRegister::WMDATA => BusComponent::WRAM,
            HWRegister::WMADDL => BusComponent::WRAM,
            HWRegister::WMADDM => BusComponent::WRAM,
            HWRegister::WMADDH => BusComponent::WRAM,
            HWRegister::JOYOUT_JOYSER0 => BusComponent::CPU,
            HWRegister::JOYSER1 => BusComponent::CPU,
            HWRegister::NMITIMEN => BusComponent::CPU,
            HWRegister::WRIO => BusComponent::CPU,
            HWRegister::WRMPYA => BusComponent::CPU,
            HWRegister::WRMPYB => BusComponent::CPU,
            HWRegister::WRDIVL => BusComponent::CPU,
            HWRegister::WRDIVH => BusComponent::CPU,
            HWRegister::WRDIVB => BusComponent::CPU,
            HWRegister::HTIMEL => BusComponent::CPU,
            HWRegister::HTIMEH => BusComponent::CPU,
            HWRegister::VTIMEL => BusComponent::CPU,
            HWRegister::VTIMEH => BusComponent::CPU,
            HWRegister::MDMAEN => BusComponent::CPU,
            HWRegister::HDMAEN => BusComponent::CPU,
            HWRegister::MEMSEL => BusComponent::CPU,
            HWRegister::RDNMI => BusComponent::CPU,
            HWRegister::TIMEUP => BusComponent::CPU,
            HWRegister::HVBJOY => BusComponent::CPU,
            HWRegister::RDIO => BusComponent::CPU,
            HWRegister::RDDIVL => BusComponent::CPU,
            HWRegister::RDIVH => BusComponent::CPU,
            HWRegister::RDMPYL => BusComponent::CPU,
            HWRegister::RDMPLYH => BusComponent::CPU,
            HWRegister::JOY1L => BusComponent::CPU,
            HWRegister::JOY1H => BusComponent::CPU,
            HWRegister::JOY2L => BusComponent::CPU,
            HWRegister::JOY2H => BusComponent::CPU,
            HWRegister::JOY3L => BusComponent::CPU,
            HWRegister::JOY3H => BusComponent::CPU,
            HWRegister::JOY4L => BusComponent::CPU,
            HWRegister::JOY4H => BusComponent::CPU,
            HWRegister::DMAP0 => BusComponent::DMA,
            HWRegister::BBAD0 => BusComponent::DMA,
            HWRegister::A1T0L => BusComponent::DMA,
            HWRegister::A1T0H => BusComponent::DMA,
            HWRegister::A1B0 => BusComponent::DMA,
            HWRegister::DAS0L => BusComponent::DMA,
            HWRegister::DAS0H => BusComponent::DMA,
            HWRegister::DASB0 => BusComponent::DMA,
            HWRegister::A2A0L => BusComponent::DMA,
            HWRegister::A2A0H => BusComponent::DMA,
            HWRegister::NTLR0 => BusComponent::DMA,
            HWRegister::DMAP1 => BusComponent::DMA,
            HWRegister::BBAD1 => BusComponent::DMA,
            HWRegister::A1T1L => BusComponent::DMA,
            HWRegister::A1T1H => BusComponent::DMA,
            HWRegister::A1B1 => BusComponent::DMA,
            HWRegister::DAS1L => BusComponent::DMA,
            HWRegister::DAS1H => BusComponent::DMA,
            HWRegister::DASB1 => BusComponent::DMA,
            HWRegister::A2A1L => BusComponent::DMA,
            HWRegister::A2A1H => BusComponent::DMA,
            HWRegister::NTLR1 => BusComponent::DMA,
            HWRegister::DMAP2 => BusComponent::DMA,
            HWRegister::BBAD2 => BusComponent::DMA,
            HWRegister::A1T2L => BusComponent::DMA,
            HWRegister::A1T2H => BusComponent::DMA,
            HWRegister::A1B2 => BusComponent::DMA,
            HWRegister::DAS2L => BusComponent::DMA,
            HWRegister::DAS2H => BusComponent::DMA,
            HWRegister::DASB2 => BusComponent::DMA,
            HWRegister::A2A2L => BusComponent::DMA,
            HWRegister::A2A2H => BusComponent::DMA,
            HWRegister::NTLR2 => BusComponent::DMA,
            HWRegister::DMAP3 => BusComponent::DMA,
            HWRegister::BBAD3 => BusComponent::DMA,
            HWRegister::A1T3L => BusComponent::DMA,
            HWRegister::A1T3H => BusComponent::DMA,
            HWRegister::A1B3 => BusComponent::DMA,
            HWRegister::DAS3L => BusComponent::DMA,
            HWRegister::DAS3H => BusComponent::DMA,
            HWRegister::DASB3 => BusComponent::DMA,
            HWRegister::A2A3L => BusComponent::DMA,
            HWRegister::A2A3H => BusComponent::DMA,
            HWRegister::NTLR3 => BusComponent::DMA,
            HWRegister::DMAP4 => BusComponent::DMA,
            HWRegister::BBAD4 => BusComponent::DMA,
            HWRegister::A1T4L => BusComponent::DMA,
            HWRegister::A1T4H => BusComponent::DMA,
            HWRegister::A1B4 => BusComponent::DMA,
            HWRegister::DAS4L => BusComponent::DMA,
            HWRegister::DAS4H => BusComponent::DMA,
            HWRegister::DASB4 => BusComponent::DMA,
            HWRegister::A2A4L => BusComponent::DMA,
            HWRegister::A2A4H => BusComponent::DMA,
            HWRegister::NTLR4 => BusComponent::DMA,
            HWRegister::DMAP5 => BusComponent::DMA,
            HWRegister::BBAD5 => BusComponent::DMA,
            HWRegister::A1T5L => BusComponent::DMA,
            HWRegister::A1T5H => BusComponent::DMA,
            HWRegister::A1B5 => BusComponent::DMA,
            HWRegister::DAS5L => BusComponent::DMA,
            HWRegister::DAS5H => BusComponent::DMA,
            HWRegister::DASB5 => BusComponent::DMA,
            HWRegister::A2A5L => BusComponent::DMA,
            HWRegister::A2A5H => BusComponent::DMA,
            HWRegister::NTLR5 => BusComponent::DMA,
            HWRegister::DMAP6 => BusComponent::DMA,
            HWRegister::BBAD6 => BusComponent::DMA,
            HWRegister::A1T6L => BusComponent::DMA,
            HWRegister::A1T6H => BusComponent::DMA,
            HWRegister::A1B6 => BusComponent::DMA,
            HWRegister::DAS6L => BusComponent::DMA,
            HWRegister::DAS6H => BusComponent::DMA,
            HWRegister::DASB6 => BusComponent::DMA,
            HWRegister::A2A6L => BusComponent::DMA,
            HWRegister::A2A6H => BusComponent::DMA,
            HWRegister::NTLR6 => BusComponent::DMA,
            HWRegister::DMAP7 => BusComponent::DMA,
            HWRegister::BBAD7 => BusComponent::DMA,
            HWRegister::A1T7L => BusComponent::DMA,
            HWRegister::A1T7H => BusComponent::DMA,
            HWRegister::A1B7 => BusComponent::DMA,
            HWRegister::DAS7L => BusComponent::DMA,
            HWRegister::DAS7H => BusComponent::DMA,
            HWRegister::DASB7 => BusComponent::DMA,
            HWRegister::A2A7L => BusComponent::DMA,
            HWRegister::A2A7H => BusComponent::DMA,
            HWRegister::NTLR7 => BusComponent::DMA,
        }
    }

    pub fn get_type(&self) -> Type {
        match self {
            HWRegister::INIDISP => Type::W8,
            HWRegister::OBJSEL => Type::W8,
            HWRegister::OAMADDL => Type::W16,
            HWRegister::OAMADDH => Type::W16,
            HWRegister::OAMDATA => Type::W8x2,
            HWRegister::BGMODE => Type::W8,
            HWRegister::MOSAIC => Type::W8,
            HWRegister::BG1SC => Type::W8,
            HWRegister::BG2SC => Type::W8,
            HWRegister::BG3SC => Type::W8,
            HWRegister::BG4SC => Type::W8,
            HWRegister::BG12NBA => Type::W8,
            HWRegister::BG34NBA => Type::W8,
            HWRegister::BG1HOFS => Type::W8x2,
            HWRegister::M7HOFS => Type::W8x2,
            HWRegister::BG1VOFS => Type::W8x2,
            HWRegister::M7VOFS => Type::W8x2,
            HWRegister::BG3VOFS => Type::W8x2,
            HWRegister::BG4HOFS => Type::W8x2,
            HWRegister::BG4VOFS => Type::W8x2,
            HWRegister::VMAIN => Type::W8,
            HWRegister::VMADDL => Type::W16,
            HWRegister::VMADDH => Type::W16,
            HWRegister::VMDATAL => Type::W16,
            HWRegister::VMDATAH => Type::W16,
            HWRegister::M7SEL => Type::W8,
            HWRegister::M7A => Type::W8x2,
            HWRegister::M7B => Type::W8x2,
            HWRegister::M7C => Type::W8x2,
            HWRegister::M7D => Type::W8x2,
            HWRegister::M7X => Type::W8x2,
            HWRegister::M7Y => Type::W8x2,
            HWRegister::CGADD => Type::W8,
            HWRegister::CGDATA => Type::W8x2,
            HWRegister::W12SEL => Type::W8,
            HWRegister::W34SEL => Type::W8,
            HWRegister::WOBJSEL => Type::W8,
            HWRegister::WH0 => Type::W8,
            HWRegister::WH1 => Type::W8,
            HWRegister::WH2 => Type::W8,
            HWRegister::WH3 => Type::W8,
            HWRegister::WBGLOG => Type::W8,
            HWRegister::WOBJLOG => Type::W8,
            HWRegister::TM => Type::W8,
            HWRegister::TS => Type::W8,
            HWRegister::TMW => Type::W8,
            HWRegister::TSW => Type::W8,
            HWRegister::CGWSEL => Type::W8,
            HWRegister::CGADSUB => Type::W8,
            HWRegister::COLDATA => Type::W8,
            HWRegister::SETINI => Type::W8,
            HWRegister::MPYL => Type::R24,
            HWRegister::MPYM => Type::R24,
            HWRegister::MPYH => Type::R24,
            HWRegister::SLHV => Type::R8,
            HWRegister::OAMDATAREAD => Type::R8,
            HWRegister::VMDATALREAD => Type::R16,
            HWRegister::VMDATAHREAD => Type::R16,
            HWRegister::CGDATAREAD => Type::R8x2,
            HWRegister::OPHCT => Type::R8x2,
            HWRegister::OPVCT => Type::R8x2,
            HWRegister::STAT77 => Type::R8,
            HWRegister::STAT78 => Type::R8,
            // APU
            HWRegister::APUIO0 => Type::RW8,
            HWRegister::APUIO1 => Type::RW8,
            HWRegister::APUIO2 => Type::RW8,
            HWRegister::APUIO3 => Type::RW8,
            // WRAM
            HWRegister::WMDATA => Type::RW8,
            HWRegister::WMADDL => Type::W24,
            HWRegister::WMADDM => Type::W24,
            HWRegister::WMADDH => Type::W24,
            // CPU
            HWRegister::JOYOUT_JOYSER0 => Type::RW8, // This is a special case: On write (W8) it's JOYOUT and on read (R8) it's JOYSER0
            HWRegister::JOYSER1 => Type::R8,
            HWRegister::NMITIMEN => Type::W8,
            HWRegister::WRIO => Type::W8,
            HWRegister::WRMPYA => Type::W8,
            HWRegister::WRMPYB => Type::W8,
            HWRegister::WRDIVL => Type::W16,
            HWRegister::WRDIVH => Type::W16,
            HWRegister::WRDIVB => Type::W8,
            HWRegister::HTIMEL => Type::W16,
            HWRegister::HTIMEH => Type::W16,
            HWRegister::VTIMEL => Type::W16,
            HWRegister::VTIMEH => Type::W16,
            HWRegister::MDMAEN => Type::W8,
            HWRegister::HDMAEN => Type::W8,
            HWRegister::MEMSEL => Type::W8,
            HWRegister::RDNMI => Type::R8,
            HWRegister::TIMEUP => Type::R8,
            HWRegister::HVBJOY => Type::R8,
            HWRegister::RDIO => Type::R8,
            HWRegister::RDDIVL => Type::R16,
            HWRegister::RDIVH => Type::R16,
            HWRegister::RDMPYL => Type::R16,
            HWRegister::RDMPLYH => Type::R16,
            HWRegister::JOY1L => Type::R16,
            HWRegister::JOY1H => Type::R16,
            HWRegister::JOY2L => Type::R16,
            HWRegister::JOY2H => Type::R16,
            HWRegister::JOY3L => Type::R16,
            HWRegister::JOY3H => Type::R16,
            HWRegister::JOY4L => Type::R16,
            HWRegister::JOY4H => Type::R16,
            // DMA
            HWRegister::DMAP0 => Type::RW8,
            HWRegister::BBAD0 => Type::RW8,
            HWRegister::A1T0L => Type::RW24,
            HWRegister::A1T0H => Type::RW24,
            HWRegister::A1B0 => Type::RW24,
            HWRegister::DAS0L => Type::RW24,
            HWRegister::DAS0H => Type::RW24,
            HWRegister::DASB0 => Type::RW24,
            HWRegister::A2A0L => Type::RW16,
            HWRegister::A2A0H => Type::RW16,
            HWRegister::NTLR0 => Type::RW8,
            HWRegister::DMAP1 => Type::RW8,
            HWRegister::BBAD1 => Type::RW8,
            HWRegister::A1T1L => Type::RW24,
            HWRegister::A1T1H => Type::RW24,
            HWRegister::A1B1 => Type::RW24,
            HWRegister::DAS1L => Type::RW24,
            HWRegister::DAS1H => Type::RW24,
            HWRegister::DASB1 => Type::RW24,
            HWRegister::A2A1L => Type::RW16,
            HWRegister::A2A1H => Type::RW16,
            HWRegister::NTLR1 => Type::RW8,
            HWRegister::DMAP2 => Type::RW8,
            HWRegister::BBAD2 => Type::RW8,
            HWRegister::A1T2L => Type::RW24,
            HWRegister::A1T2H => Type::RW24,
            HWRegister::A1B2 => Type::RW24,
            HWRegister::DAS2L => Type::RW24,
            HWRegister::DAS2H => Type::RW24,
            HWRegister::DASB2 => Type::RW24,
            HWRegister::A2A2L => Type::RW16,
            HWRegister::A2A2H => Type::RW16,
            HWRegister::NTLR2 => Type::RW8,
            HWRegister::DMAP3 => todo!(),
            HWRegister::BBAD3 => todo!(),
            HWRegister::A1T3L => todo!(),
            HWRegister::A1T3H => todo!(),
            HWRegister::A1B3 => todo!(),
            HWRegister::DAS3L => todo!(),
            HWRegister::DAS3H => todo!(),
            HWRegister::DASB3 => todo!(),
            HWRegister::A2A3L => todo!(),
            HWRegister::A2A3H => todo!(),
            HWRegister::NTLR3 => todo!(),
            HWRegister::DMAP4 => todo!(),
            HWRegister::BBAD4 => todo!(),
            HWRegister::A1T4L => todo!(),
            HWRegister::A1T4H => todo!(),
            HWRegister::A1B4 => todo!(),
            HWRegister::DAS4L => todo!(),
            HWRegister::DAS4H => todo!(),
            HWRegister::DASB4 => todo!(),
            HWRegister::A2A4L => todo!(),
            HWRegister::A2A4H => todo!(),
            HWRegister::NTLR4 => todo!(),
            HWRegister::DMAP5 => todo!(),
            HWRegister::BBAD5 => todo!(),
            HWRegister::A1T5L => todo!(),
            HWRegister::A1T5H => todo!(),
            HWRegister::A1B5 => todo!(),
            HWRegister::DAS5L => todo!(),
            HWRegister::DAS5H => todo!(),
            HWRegister::DASB5 => todo!(),
            HWRegister::A2A5L => todo!(),
            HWRegister::A2A5H => todo!(),
            HWRegister::NTLR5 => todo!(),
            HWRegister::DMAP6 => todo!(),
            HWRegister::BBAD6 => todo!(),
            HWRegister::A1T6L => todo!(),
            HWRegister::A1T6H => todo!(),
            HWRegister::A1B6 => todo!(),
            HWRegister::DAS6L => todo!(),
            HWRegister::DAS6H => todo!(),
            HWRegister::DASB6 => todo!(),
            HWRegister::A2A6L => todo!(),
            HWRegister::A2A6H => todo!(),
            HWRegister::NTLR6 => todo!(),
            HWRegister::DMAP7 => todo!(),
            HWRegister::BBAD7 => todo!(),
            HWRegister::A1T7L => todo!(),
            HWRegister::A1T7H => todo!(),
            HWRegister::A1B7 => todo!(),
            HWRegister::DAS7L => todo!(),
            HWRegister::DAS7H => todo!(),
            HWRegister::DASB7 => todo!(),
            HWRegister::A2A7L => todo!(),
            HWRegister::A2A7H => todo!(),
            HWRegister::NTLR7 => todo!(),
        }
    }

    pub fn get_register(address: u16) -> Option<HWRegister> {
        match address {
            0x2100 => Some(HWRegister::INIDISP),
            0x2101 => Some(HWRegister::OBJSEL),
            0x2102 => Some(HWRegister::OAMADDL),
            0x2103 => Some(HWRegister::OAMADDH),
            0x2104 => Some(HWRegister::OAMDATA),
            0x2105 => Some(HWRegister::BGMODE),
            0x2106 => Some(HWRegister::MOSAIC),
            0x2107 => Some(HWRegister::BG1SC),
            0x2108 => Some(HWRegister::BG2SC),
            0x2109 => Some(HWRegister::BG3SC),
            0x210a => Some(HWRegister::BG4SC),
            0x210b => Some(HWRegister::BG12NBA),
            0x210c => Some(HWRegister::BG34NBA),
            0x210d => Some(HWRegister::BG1HOFS),
            0x210e => Some(HWRegister::M7HOFS),
            0x210f => Some(HWRegister::BG1VOFS),
            0x2110 => Some(HWRegister::M7VOFS),
            0x2111 => Some(HWRegister::BG3VOFS),
            0x2112 => Some(HWRegister::BG4HOFS),
            0x2113 => Some(HWRegister::BG4VOFS),
            0x2114 => Some(HWRegister::VMAIN),
            0x2115 => Some(HWRegister::VMADDL),
            0x2116 => Some(HWRegister::VMADDH),
            0x2117 => Some(HWRegister::VMDATAL),
            0x2118 => Some(HWRegister::VMDATAH),
            0x2119 => Some(HWRegister::M7SEL),
            0x211a => Some(HWRegister::M7A),
            0x211b => Some(HWRegister::M7B),
            0x211c => Some(HWRegister::M7C),
            0x211d => Some(HWRegister::M7D),
            0x211e => Some(HWRegister::M7X),
            0x211f => Some(HWRegister::M7Y),
            0x2120 => Some(HWRegister::CGADD),
            0x2121 => Some(HWRegister::CGDATA),
            0x2122 => Some(HWRegister::W12SEL),
            0x2123 => Some(HWRegister::W34SEL),
            0x2124 => Some(HWRegister::WOBJSEL),
            0x2125 => Some(HWRegister::WH0),
            0x2126 => Some(HWRegister::WH1),
            0x2127 => Some(HWRegister::WH2),
            0x2128 => Some(HWRegister::WH3),
            0x2129 => Some(HWRegister::WBGLOG),
            0x212a => Some(HWRegister::WOBJLOG),
            0x212b => Some(HWRegister::TM),
            0x212c => Some(HWRegister::TS),
            0x212d => Some(HWRegister::TMW),
            0x212e => Some(HWRegister::TSW),
            0x212f => Some(HWRegister::CGWSEL),
            0x2130 => Some(HWRegister::CGADSUB),
            0x2131 => Some(HWRegister::COLDATA),
            0x2132 => Some(HWRegister::SETINI),
            0x2133 => Some(HWRegister::MPYL),
            0x2134 => Some(HWRegister::MPYM),
            0x2135 => Some(HWRegister::MPYH),
            0x2136 => Some(HWRegister::SLHV),
            0x2137 => Some(HWRegister::OAMDATAREAD),
            0x2138 => Some(HWRegister::VMDATALREAD),
            0x2139 => Some(HWRegister::VMDATAHREAD),
            0x213a => Some(HWRegister::CGDATAREAD),
            0x213b => Some(HWRegister::OPHCT),
            0x213c => Some(HWRegister::OPVCT),
            0x213d => Some(HWRegister::STAT77),
            0x213e => Some(HWRegister::STAT78),
            // APU
            0x2140 => Some(HWRegister::APUIO0),
            0x2141 => Some(HWRegister::APUIO1),
            0x2142 => Some(HWRegister::APUIO2),
            0x2143 => Some(HWRegister::APUIO3),
            // S-WRAM
            0x2180 => Some(HWRegister::WMDATA),
            0x2181 => Some(HWRegister::WMADDL),
            0x2182 => Some(HWRegister::WMADDM),
            0x2183 => Some(HWRegister::WMADDH),
            // JOYPAD
            0x4016 => Some(HWRegister::JOYOUT_JOYSER0),
            0x4017 => Some(HWRegister::JOYSER1),
            0x4200 => Some(HWRegister::NMITIMEN),
            0x4201 => Some(HWRegister::WRIO),
            0x4202 => Some(HWRegister::WRMPYA),
            0x4203 => Some(HWRegister::WRMPYB),
            0x4204 => Some(HWRegister::WRDIVL),
            0x4205 => Some(HWRegister::WRDIVH),
            0x4206 => Some(HWRegister::WRDIVB),
            0x4207 => Some(HWRegister::HTIMEL),
            0x4208 => Some(HWRegister::HTIMEH),
            0x4209 => Some(HWRegister::VTIMEL),
            0x420a => Some(HWRegister::VTIMEH),
            0x420b => Some(HWRegister::MDMAEN),
            0x420c => Some(HWRegister::HDMAEN),
            0x420d => Some(HWRegister::MEMSEL),
            0x4210 => Some(HWRegister::RDNMI),
            0x4211 => Some(HWRegister::TIMEUP),
            0x4212 => Some(HWRegister::HVBJOY),
            0x4213 => Some(HWRegister::RDIO),
            0x4214 => Some(HWRegister::RDDIVL),
            0x4215 => Some(HWRegister::RDIVH),
            0x4216 => Some(HWRegister::RDMPYL),
            0x4217 => Some(HWRegister::RDMPLYH),
            0x4218 => Some(HWRegister::JOY1L),
            0x4219 => Some(HWRegister::JOY1H),
            0x421a => Some(HWRegister::JOY2L),
            0x421b => Some(HWRegister::JOY2H),
            0x421c => Some(HWRegister::JOY3L),
            0x421d => Some(HWRegister::JOY3H),
            0x421e => Some(HWRegister::JOY4L),
            0x421f => Some(HWRegister::JOY4H),
            // DMA
            0x4300 => Some(HWRegister::DMAP0),
            0x4301 => Some(HWRegister::BBAD0),
            0x4302 => Some(HWRegister::A1T0L),
            0x4303 => Some(HWRegister::A1T0H),
            0x4304 => Some(HWRegister::A1B0),
            0x4305 => Some(HWRegister::DAS0L),
            0x4306 => Some(HWRegister::DAS0H),
            0x4307 => Some(HWRegister::DASB0),
            0x4308 => Some(HWRegister::A2A0L),
            0x4309 => Some(HWRegister::A2A0H),
            0x430a => Some(HWRegister::NTLR0),
            //   UNUSESome(D0 = 0x430b),
            0x4310 => Some(HWRegister::DMAP1),
            0x4311 => Some(HWRegister::BBAD1),
            0x4312 => Some(HWRegister::A1T1L),
            0x4313 => Some(HWRegister::A1T1H),
            0x4314 => Some(HWRegister::A1B1),
            0x4315 => Some(HWRegister::DAS1L),
            0x4316 => Some(HWRegister::DAS1H),
            0x4317 => Some(HWRegister::DASB1),
            0x4318 => Some(HWRegister::A2A1L),
            0x4319 => Some(HWRegister::A2A1H),
            0x431a => Some(HWRegister::NTLR1),
            //    UNUSSome(ED1),
            0x4320 => Some(HWRegister::DMAP2),
            0x4321 => Some(HWRegister::BBAD2),
            0x4322 => Some(HWRegister::A1T2L),
            0x4323 => Some(HWRegister::A1T2H),
            0x4324 => Some(HWRegister::A1B2),
            0x4325 => Some(HWRegister::DAS2L),
            0x4326 => Some(HWRegister::DAS2H),
            0x4327 => Some(HWRegister::DASB2),
            0x4328 => Some(HWRegister::A2A2L),
            0x4329 => Some(HWRegister::A2A2H),
            0x432a => Some(HWRegister::NTLR2),
            //    UNUSSome(ED1),
            0x4330 => Some(HWRegister::DMAP3),
            0x4331 => Some(HWRegister::BBAD3),
            0x4332 => Some(HWRegister::A1T3L),
            0x4333 => Some(HWRegister::A1T3H),
            0x4334 => Some(HWRegister::A1B3),
            0x4335 => Some(HWRegister::DAS3L),
            0x4336 => Some(HWRegister::DAS3H),
            0x4337 => Some(HWRegister::DASB3),
            0x4338 => Some(HWRegister::A2A3L),
            0x4339 => Some(HWRegister::A2A3H),
            0x433a => Some(HWRegister::NTLR3),
            //    UNUSSome(ED1),
            0x4340 => Some(HWRegister::DMAP4),
            0x4341 => Some(HWRegister::BBAD4),
            0x4342 => Some(HWRegister::A1T4L),
            0x4343 => Some(HWRegister::A1T4H),
            0x4344 => Some(HWRegister::A1B4),
            0x4345 => Some(HWRegister::DAS4L),
            0x4346 => Some(HWRegister::DAS4H),
            0x4347 => Some(HWRegister::DASB4),
            0x4348 => Some(HWRegister::A2A4L),
            0x4349 => Some(HWRegister::A2A4H),
            0x434a => Some(HWRegister::NTLR4),
            //    UNUSSome(ED1),
            0x4350 => Some(HWRegister::DMAP5),
            0x4351 => Some(HWRegister::BBAD5),
            0x4352 => Some(HWRegister::A1T5L),
            0x4353 => Some(HWRegister::A1T5H),
            0x4354 => Some(HWRegister::A1B5),
            0x4355 => Some(HWRegister::DAS5L),
            0x4356 => Some(HWRegister::DAS5H),
            0x4357 => Some(HWRegister::DASB5),
            0x4358 => Some(HWRegister::A2A5L),
            0x4359 => Some(HWRegister::A2A5H),
            0x435a => Some(HWRegister::NTLR5),
            //    UNUSSome(ED1),
            0x4360 => Some(HWRegister::DMAP6),
            0x4361 => Some(HWRegister::BBAD6),
            0x4362 => Some(HWRegister::A1T6L),
            0x4363 => Some(HWRegister::A1T6H),
            0x4364 => Some(HWRegister::A1B6),
            0x4365 => Some(HWRegister::DAS6L),
            0x4366 => Some(HWRegister::DAS6H),
            0x4367 => Some(HWRegister::DASB6),
            0x4368 => Some(HWRegister::A2A6L),
            0x4369 => Some(HWRegister::A2A6H),
            0x436a => Some(HWRegister::NTLR6),
            //    UNUSSome(ED1),
            0x4370 => Some(HWRegister::DMAP7),
            0x4371 => Some(HWRegister::BBAD7),
            0x4372 => Some(HWRegister::A1T7L),
            0x4373 => Some(HWRegister::A1T7H),
            0x4374 => Some(HWRegister::A1B7),
            0x4375 => Some(HWRegister::DAS7L),
            0x4376 => Some(HWRegister::DAS7H),
            0x4377 => Some(HWRegister::DASB7),
            0x4378 => Some(HWRegister::A2A7L),
            0x4379 => Some(HWRegister::A2A7H),
            0x437a => Some(HWRegister::NTLR7),
            //    UNUSED1),
            _ => None,
        }
    }

    pub fn is_hw_register(address: Address) -> bool {
        match address.bank {
            0x00..=0x3f => match address.address {
                0x2000..=0x7fff => {
                    return true;
                }
                _ => {
                    return false;
                }
            },
            0x80..=0xbf => match address.address {
                0x2000..=0x7fff => {
                    return true;
                }
                _ => {
                    return false;
                }
            },
            _ => {
                return false;
            }
        }
    }
}
